package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short INT_LITERAL = 6;
		static public final short TRUE = 7;
		static public final short FALSE = 8;
		static public final short RPAREN = 9;
		static public final short RCURLY = 10;
		static public final short VOID = 11;
		static public final short BOOLEAN = 12;
		static public final short INT = 13;
		static public final short LCURLY = 14;
		static public final short SEMICOLON = 15;
		static public final short RBRACKET = 16;
		static public final short IF = 17;
		static public final short WHILE = 18;
		static public final short BREAK = 19;
		static public final short RETURN = 20;
		static public final short COMMA = 21;
		static public final short EQL = 22;
		static public final short IMPORT = 23;
		static public final short PUBLIC = 24;
		static public final short PLUS = 25;
		static public final short TIMES = 26;
		static public final short DIV = 27;
		static public final short MOD = 28;
		static public final short TYPE = 29;
		static public final short MODULE = 30;
		static public final short ELSE = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LT = 34;
		static public final short LEQ = 35;
		static public final short GT = 36;
		static public final short GEQ = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pTLbbOLLKK$k#zW4hgXHGrHICY411G186B22X355fG2bOq63Y0YfNQP3baWsc#zz93Nv$" +
		"VLmzfD9cMbPLQcbQEKQQbJKRpG8Ew#i###zvEvvx3lQbFdVFzUwsrrx$MMNkVVVO#W7ibwf" +
		"6Bop01PIX71Ien1VcOYz4OWo6OZrim20CZu0oEW9E8XRWArs4y9c8Ihi6rSCjdk1rtu4uCa" +
		"p$bQOp09SZ0g13UGsOUF97mK8qRWhnmjIM7PQI4PQI7LDCY7S5g6X3bMFLgD0T7zoFQdNZo" +
		"0suDyhx7iXv7DqDLPkT9Kfx#gkOhS2Ngq0itsZBJ77DaEtho73sNEdfg7JrNEteQ7JrDOIi" +
		"ejNWAK6Lv8sfUECUBk8QoGYAAh7nvBYH3D1x6AgmIaR$WnU8GVpYx9InZ0Cx71KX0inp3S5" +
		"o8Yp0KgPY9MPYDEMX5MqX4iMKSLdz96F$PslrmZrfrCRWOlMd5uZpqHHyifRLSM$6qxi98l" +
		"SwN8aw#HA6s$D5#VGN6uJxfaA#GYHmi8MSiVBWSDPXCsO2xCHNJAAVZUjo4c#LvpCEzM82L" +
		"k1#tuG6#aGUn1eyWSAtctANnkUdyeZBvJMLnZUUezPBBp7bSFUEuJiuLnmKtTx4ehf8OVds" +
		"z#INxHz#FtsKirsayt#q0xhjMtf1$yLmHyGnFW1U#jdF1i5OJXRXWDGc4KzM3kPu3FCFdn3" +
		"DiEvvpPU5g7ieTEf5pLdr6EVu$7kjC##V5t#krYR3o#uJqZESzWJVKUespVPSzsL5X6VtLK" +
		"sEvTc9vUsXvsIPnFqpcFfF2Cz8QOHt7V$MVhLsaLrq9T#rIMkLgXomXhrJjlOPLGQkAO$6l" +
		"SvSQbqzR$cY$xkK#FPm#OzHUHlludrNCvyNnBkRNbi2TCKwr1gTGyVplOH3RQCAmlQ8lVeF" +
		"0scN#FJ69Q2JM4KyHFg8RSAsdd4Avpk050BZBsBU1ifQefhwFs4r7FkL#dRE6#a7YC750zp" +
		"LHF#JNNKU93k8Z6aympp3AZTftZDZ4ld8Qk$GpwxHlkRRhBJKPTMxLdEt4JYfFKkwbF4xPf" +
		"NqdpN5EuDNAd7s91fs$cHX8DEey2q9Zt8bi7gDiqdOACTt26KNCqZaUfJvRzqybMiFNvMxH" +
		"zMsZFbFhd7$t79rp3V6uJTmqOhBM5#guJkfj9ivYOWQnY9Xdwf#hvHAYFT3FHNJg7uwhtJo" +
		"tv7b2Qy0EEp$pT9hqBciS#qxRvU5LgsMJoNTOo$cMc1FMl2PVjww9tuIhdZATieqoWtAF7j" +
		"yHf$ZGVAueYnrl6dUs3Ny4#$DCTYRj0Wkdq5JlPbC#NwHrHL1tfNs$E$aCyzby8rWBVSaf#" +
		"Kb9jlA7$2xTi5poMr3xLBL7W$OHufEWnJr6FYQubqYd79A3ieNQ0NcVxNl4syHRn6logcoH" +
		"L#HbsIoRv2NPAFjL$5xPf#G7iaFUaAtokhofCxz0TCYpyeniKFPwrRwesksoJVR8RdbNTib" +
		"EUOSz7wh#RrHxmiWjNyjtygrqgPulYEDA#rn#3TR#Y$pCcJYjz9DiwlXN6CEpr4s0vwc7vu" +
		"MR0CyCLn3btDydygIPH6uHxIBwnr86a6T2FdC4O9ms5UHMKQ#YNiRS1GhW$vn78vhefQLRm" +
		"wFaQCOO64CxZTB0IDPX89TwBlihAUsGGv$nv#7JoAPj$5aKcv3APwHIflU033uhawWcbwSF" +
		"ppeF0PxWBeKisZL$0z8ELCy=");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN6,	// [0] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [1] Imports = Import Imports; returns 'Imports' although none is marked
			Action.NONE,  	// [2] Imports = 
			RETURN3,	// [3] Import = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [4] Declarations = Declaration Declarations; returns 'Declarations' although none is marked
			Action.NONE,  	// [5] Declarations = 
			Action.RETURN,	// [6] Declaration = FunctionDeclaration
			Action.RETURN,	// [7] Declaration = FieldDeclaration
			Action.RETURN,	// [8] Declaration = TypeDeclaration
			RETURN9,	// [9] FunctionDeclaration = AccessSpec TypeName ID LPAREN ParamList RPAREN LCURLY StmtList RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [10] FieldDeclaration = AccessSpec TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [11] TypeDeclaration = AccessSpec TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [12] AccessSpec = PUBLIC
			Action.NONE,  	// [13] AccessSpec = 
			Action.RETURN,	// [14] TypeName = PrimitiveType
			Action.RETURN,	// [15] TypeName = ArrayType
			Action.RETURN,	// [16] TypeName = ID
			Action.RETURN,	// [17] PrimitiveType = VOID
			Action.RETURN,	// [18] PrimitiveType = BOOLEAN
			Action.RETURN,	// [19] PrimitiveType = INT
			RETURN3,	// [20] ArrayType = PrimitiveType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [21] ArrayType = ArrayType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [22] ArrayType = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [23] ParamList = NonEmptyParamList
			Action.NONE,  	// [24] ParamList = 
			new Action() {	// [25] NonEmptyParamList = NonEmptyParamList COMMA Param
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [26] NonEmptyParamList = Param
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN2,	// [27] Param = TypeName ID; returns 'ID' although none is marked
			RETURN2,	// [28] StmtList = Stmt StmtList; returns 'StmtList' although none is marked
			Action.NONE,  	// [29] StmtList = 
			RETURN3,	// [30] Stmt = TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [31] Stmt = LCURLY StmtList RCURLY; returns 'RCURLY' although none is marked
			RETURN5,	// [32] Stmt = IF LPAREN Expr RPAREN Stmt; returns 'Stmt' although none is marked
			RETURN7,	// [33] Stmt = IF LPAREN Expr RPAREN Stmt ELSE Stmt; returns 'Stmt' although none is marked
			RETURN5,	// [34] Stmt = WHILE LPAREN Expr RPAREN Stmt; returns 'Stmt' although none is marked
			RETURN2,	// [35] Stmt = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [36] Stmt = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [37] Stmt = RETURN Expr SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [38] Stmt = Expr SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [39] Expr = Assignment
			Action.RETURN,	// [40] Expr = RHSExpr
			RETURN3,	// [41] Assignment = LHSExpr EQL Expr; returns 'Expr' although none is marked
			Action.RETURN,	// [42] LHSExpr = ID
			Action.RETURN,	// [43] LHSExpr = ArrayAccess
			RETURN4,	// [44] ArrayAccess = ID LBRACKET Expr RBRACKET; returns 'RBRACKET' although none is marked
			RETURN4,	// [45] ArrayAccess = ArrayAccess LBRACKET Expr RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [46] RHSExpr = ArithExpr
			RETURN3,	// [47] RHSExpr = ArithExpr CompOp ArithExpr; returns 'ArithExpr' although none is marked
			Action.RETURN,	// [48] CompOp = EQEQ
			Action.RETURN,	// [49] CompOp = NEQ
			Action.RETURN,	// [50] CompOp = LT
			Action.RETURN,	// [51] CompOp = LEQ
			Action.RETURN,	// [52] CompOp = GT
			Action.RETURN,	// [53] CompOp = GEQ
			new Action() {	// [54] ArithExpr = ArithExpr AddOp Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [55] ArithExpr = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [56] AddOp = PLUS
			Action.RETURN,	// [57] AddOp = MINUS
			new Action() {	// [58] Term = Term MulOp Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [59] Term = Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [60] MulOp = TIMES
			Action.RETURN,	// [61] MulOp = DIV
			Action.RETURN,	// [62] MulOp = MOD
			RETURN2,	// [63] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [64] Factor = PriExpr
			Action.RETURN,	// [65] PriExpr = LHSExpr
			Action.RETURN,	// [66] PriExpr = FunctionCall
			Action.RETURN,	// [67] PriExpr = ArrayExpr
			Action.RETURN,	// [68] PriExpr = STRING_LITERAL
			Action.RETURN,	// [69] PriExpr = INT_LITERAL
			Action.RETURN,	// [70] PriExpr = BooleanLiteral
			Action.RETURN,	// [71] PriExpr = ParentExpr
			RETURN4,	// [72] FunctionCall = ID LPAREN ExprList RPAREN; returns 'RPAREN' although none is marked
			RETURN4,	// [73] ArrayExpr = LBRACKET Expr NonEmptyExprList RBRACKET; returns 'RBRACKET' although none is marked
			RETURN2,	// [74] ExprList = Expr NonEmptyExprList; returns 'NonEmptyExprList' although none is marked
			Action.NONE,  	// [75] ExprList = 
			RETURN3,	// [76] NonEmptyExprList = COMMA Expr NonEmptyExprList; returns 'NonEmptyExprList' although none is marked
			Action.NONE,  	// [77] NonEmptyExprList = 
			Action.RETURN,	// [78] BooleanLiteral = TRUE
			Action.RETURN,	// [79] BooleanLiteral = FALSE
			RETURN3	// [80] ParentExpr = LPAREN Expr RPAREN; returns 'RPAREN' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
