// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;
           
// declaration of start symbol; no need to change this
%goal Module;

/* TODO: Flesh out the rule for Module, and add rules for other nonterminals. Here is an example
         of a rule you may want to add:
         
   Accessibility = PUBLIC
		  |
		  ;
  */

Module = MODULE ID LCURLY Imports Declarations RCURLY;

Imports = Import Imports
	|
	;

Import = IMPORT ID SEMICOLON;

Declarations = Declaration Declarations
	|
	;

Declaration = FunctionDeclaration
	| FieldDeclaration
	| TypeDeclaration
	;

FunctionDeclaration = AccessSpec TypeName ID LPAREN ParamList RPAREN LCURLY StmtList RCURLY;
FieldDeclaration = AccessSpec TypeName ID SEMICOLON;
TypeDeclaration = AccessSpec TYPE ID EQL STRING_LITERAL SEMICOLON;

AccessSpec = PUBLIC
	|
	;

TypeName = PrimitiveType
	| ArrayType
	| ID
	;

PrimitiveType = VOID
	| BOOLEAN
	| INT
	;

// Avoid LALR Conflicts: Expand the definition of TypeName	
// TypeName: PrimitiveType or ArrayType or ID
ArrayType = PrimitiveType LBRACKET RBRACKET
	| ArrayType LBRACKET RBRACKET
	| ID LBRACKET RBRACKET
	;

// Empty Parameter List
ParamList = NonEmptyParamList
	|
	;

// Non-Empty Parameter List
NonEmptyParamList = NonEmptyParamList COMMA Param
	| Param
	;

Param = TypeName ID;

// Create Statement List
StmtList = Stmt StmtList
	|
	;

Stmt = TypeName ID SEMICOLON
	| LCURLY StmtList RCURLY
	| IF LPAREN Expr RPAREN Stmt
	| IF LPAREN Expr RPAREN Stmt ELSE Stmt
	| WHILE LPAREN Expr RPAREN Stmt
	| BREAK SEMICOLON
	| RETURN SEMICOLON
	| RETURN Expr SEMICOLON
	| Expr SEMICOLON
	;

Expr = Assignment
	| RHSExpr
	;

Assignment = LHSExpr EQL Expr;

LHSExpr = ID
	| ArrayAccess
	;

// Avoid LALR Conflicts: Expand the definition of LHSExpr	
// LHSExpr: ID or ArrayAccess
ArrayAccess = ID LBRACKET Expr RBRACKET
	| ArrayAccess LBRACKET Expr RBRACKET
	;

RHSExpr = ArithExpr
	| ArithExpr CompOp ArithExpr
	;

CompOp = EQEQ
	| NEQ
	| LT
	| LEQ
	| GT
	| GEQ
	;

ArithExpr = ArithExpr AddOp Term
	| Term
	;

AddOp = PLUS
	| MINUS
	;

Term = Term MulOp Factor
	| Factor
	;

MulOp = TIMES
	| DIV
	| MOD
	;

Factor = MINUS Factor
	| PriExpr
	;

PriExpr = LHSExpr
	| FunctionCall
	| ArrayExpr
	| STRING_LITERAL
	| INT_LITERAL
	| BooleanLiteral
	| ParentExpr
	;

FunctionCall = ID LPAREN ExprList RPAREN;

ArrayExpr = LBRACKET Expr NonEmptyExprList RBRACKET;

// Empty List of Expressions
ExprList = Expr NonEmptyExprList
	|
	;

// Non-Empty List of Expressions
NonEmptyExprList = COMMA Expr NonEmptyExprList
	|
	;

BooleanLiteral = TRUE
	| FALSE
	;

ParentExpr = LPAREN Expr RPAREN;

/**/